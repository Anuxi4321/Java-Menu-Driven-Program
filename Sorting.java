import java.util.Arrays;
import java.util.Scanner;

public class Sorting {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("\n\n\t\t\t\t\t\t\tEnter the size of the array: ");
        int size = sc.nextInt();

        int[] array = new int[size];

        System.out.print("\n\t\t\t\t\t\t\tEnter the elements of the array: ");
        for (int i = 0; i < size; i++) {
            array[i] = sc.nextInt();
        }

        boolean continueSorting = true;

        System.out.println("\n\n\t\t\t             :===:                .-==-:                                                                                         .-===:            ");
        System.out.println("\t\t\t          .=%@@@@@@#=.         .+%@@@@@@@*:        @@@@@@@@@@%*-.    .%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@*         :@@@@@+       .=%@@@@@@@#-.      ");
        System.out.println("\t\t\t         :#@@@@@@@@@@%+.     .*@@@@@@@@@@@@*:      @@@@@@@@@@@@@%+   .%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@@=        :@@@@@+      +%@@@@@@@@@@@%=      ");
        System.out.println("\t\t\t        .@@@@@@@@@@@@@%.    :@@@@@@@@@@@@@@@@:     @@@@@@@@@@@@@@@#  .%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@@@.       :@@@@@+     #@@@@@@@@@@@@@@@*    ");
        System.out.println("\t\t\t       .%@@@@@@@@@@@@@+    :%@@@@@@@@@@@@@@@@@=    @@@@@@@@@@@@@@@@= .%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@@@*       :@@@@@+   .#@@@@@@@@@@@@@@@@@+    ");
        System.out.println("\t\t\t       =@@@@@@@#%@@@@@.   .%@@@@@@@@@@@@@@@@@@@:   @@@@@@***@@@@@@@%..%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@@@@-      :@@@@@+   *@@@@@@@@%##@@@@@@@=   ");
        System.out.println("\t\t\t       =@@@@@@@#%@@@@@.   .%@@@@@@@@@@@@@@@@@@@:   @@@@@@***@@@@@@@%..%@@@@@@@@@@@@@@@@@=@@@@@= -@@@@@@@@-      :@@@@@+   *@@@@@@@@%##@@@@@@@=   ");
        System.out.println("\t\t\t      .%@@@@*       :    =@@@@@@#:      .*@@@@@@+  @@@@@#     #@@@@@:       %@@@@%      -@@@@@= -@@@@@@@@@*     :@@@@@+ .%@@@@@@=       :#@+        ");
        System.out.println("\t\t\t      .%@@@@*            #@@@@@%          %@@@@@%. @@@@@#     +@@@@@-       %@@@@%      -@@@@@= -@@@@@@@@@@-    :@@@@@+ =@@@@@@+          +         ");
        System.out.println("\t\t\t       #@@@@@+.         .@@@@@@-          :@@@@@@- @@@@@#     +@@@@@:       %@@@@%      -@@@@@= -@@@@@@@@@@#    :@@@@@+ *@@@@@%                     ");
        System.out.println("\t\t\t       +@@@@@@%=        =@@@@@%.           *@@@@@+ @@@@@#     #@@@@@:       %@@@@%      -@@@@@= -@@@@@%@@@@@*   :@@@@@+.%@@@@@-                     ");
        System.out.println("\t\t\t       .@@@@@@@@%=.     #@@@@@*            =@@@@@# @@@@@#   .+@@@@@%.       %@@@@%      -@@@@@= -@@@@@=%@@@@@-  :@@@@@+.@@@@@@.                    ");
        System.out.println("\t\t\t        :%@@@@@@@@%+.   %@@@@@+            -@@@@@% @@@@@@**#%@@@@@@+        %@@@@%      -@@@@@= -@@@@@-:@@@@@#. :@@@@@+:@@@@@%.     *##########*.   ");
        System.out.println("\t\t\t        :%@@@@@@@@%+.   %@@@@@+            -@@@@@% @@@@@@**#%@@@@@@+        %@@@@%      -@@@@@= -@@@@@-:@@@@@#. :@@@@@+:@@@@@%.     *##########*.   ");
        System.out.println("\t\t\t          .+%@@@@@@@@@- %@@@@@+            -@@@@@% @@@@@@@@@@@@@@*          %@@@@%      -@@@@@= -@@@@@- .%@@@@@::@@@@@+:@@@@@%.     %@@@@@@@@@@%.   ");
        System.out.println("\t\t\t            .=@@@@@@@@%:#@@@@@+            -@@@@@# @@@@@@@@@@@@#-           %@@@@%      -@@@@@= -@@@@@-  :@@@@@%-@@@@@+.@@@@@%.     %@@@@@@@@@@%.   ");
        System.out.println("\t\t\t              .+@@@@@@@++@@@@@*            +@@@@@* @@@@@@%@@@@@*            %@@@@%      -@@@@@= -@@@@@-   +@@@@@#@@@@@+.%@@@@@:     +*****@@@@@%.   ");
        System.out.println("\t\t\t                :#@@@@@%-@@@@@%.           @@@@@@= @@@@@#-@@@@@@+           %@@@@%      -@@@@@= -@@@@@-   .#@@@@@@@@@@+ #@@@@@*           %@@@@%.   ");
        System.out.println("\t\t\t                 -@@@@@@.%@@@@@+          +@@@@@@: @@@@@# =@@@@@@-          %@@@@%      -@@@@@= -@@@@@-    -@@@@@@@@@@+ +@@@@@@-         .@@@@@#    ");
        System.out.println("\t\t\t      .#*:       -@@@@@@ +@@@@@@=        -@@@@@@#  @@@@@#  *@@@@@@-         %@@@@%      -@@@@@= -@@@@@-     *@@@@@@@@@+ :@@@@@@%:       .#@@@@@+   ");
        System.out.println("\t\t\t      .#*:       -@@@@@@ +@@@@@@=        -@@@@@@#  @@@@@#  *@@@@@@-         %@@@@%      -@@@@@= -@@@@@-     *@@@@@@@@@+ :@@@@@@%:       .#@@@@@+   ");
        System.out.println("\t\t\t     .%@@@@@*==*@@@@@@@+  +@@@@@@@@%##%@@@@@@@@+   @@@@@#   :@@@@@@#.       %@@@@%      -@@@@@= -@@@@@-      -@@@@@@@@+   #@@@@@@@%+==#@@@@@@@=     ");
        System.out.println("\t\t\t     *@@@@@@@@@@@@@@@@@:   +@@@@@@@@@@@@@@@@@@*    @@@@@#    -@@@@@@#       %@@@@%      -@@@@@= -@@@@@-       *@@@@@@@+   :%@@@@@@@@@@@@@@@@@*    ");
        System.out.println("\t\t\t    :@@@@@@@@@@@@@@@@@*     *@@@@@@@@@@@@@@@@%     @@@@@#     +@@@@@@#      %@@@@%      -@@@@@= -@@@@@-        @@@@@@@+    :@@@@@@@@@@@@@@@@%.      ");
        System.out.println("\t\t\t     .*@@@@@@@@@@@@@@*.      +%@@@@@@@@@@@@@+      @@@@@#      #@@@@@@=     %@@@@%      -@@@@@= -@@@@@-        -@@@@@@+     .#@@@@@@@@@@@@@+    ");
        System.out.println("\t\t\t       :+@@@@@@@@@@%-         :*@@@@@@@@@@*:       @@@@@#      .%@@@@@@-    %@@@@%      -@@@@@= -@@@@@-         *@@@@@+       -%@@@@@@@@@*:     ");
        System.out.println("\t\t\t         -+#%%%#+:              -*%%%%*=.         =====-       .=======    -====-      .=====. .=====.         .-====:         :+#%%#*=.        \n\n");
        System.out.println("\t\t\t\t\t\t\t==============================================================================\n");
        System.out.println("\t\t\t\t\t\t\t\t\t\t\tWhat is Sorting?\n");
        System.out.println("\t\t\t\t\t\t\tA sorting algorithm is a method for reorganizing a large number of items into a");
        System.out.println("\t\t\t\t\t\t\tspecific order, such as alphabetical, highest-to-lowest value or shortest-to-longest");
        System.out.println("\t\t\t\t\t\t\tdistance. Sorting algorithms take lists of items as input data, perform specific");
        System.out.println("\t\t\t\t\t\t\toperations on those lists and deliver ordered arrays as output. \n");
        System.out.println("\t\t\t\t\t\t\t==============================================================================");

        while (continueSorting) {
            System.out.println("\n\t\t\t\t\t\t\tBelow are the Different Types of Sorting Algorithms.");
            System.out.println("\t\t\t\t\t\t\tChoose an Option.\n");
            System.out.println("\t\t\t\t\t\t\t[1] Bubble Sort");
            System.out.println("\t\t\t\t\t\t\t[2] Bucket Sort");
            System.out.println("\t\t\t\t\t\t\t[3] Comb Sort");
            System.out.println("\t\t\t\t\t\t\t[4] Counting Sort");
            System.out.println("\t\t\t\t\t\t\t[5] Heap Sort");
            System.out.println("\t\t\t\t\t\t\t[6] Insertion Sort");
            System.out.println("\t\t\t\t\t\t\t[7] Merge Sort");
            System.out.println("\t\t\t\t\t\t\t[8] Quick Sort");
            System.out.println("\t\t\t\t\t\t\t[9] Radix Sort");
            System.out.println("\t\t\t\t\t\t\t[10] Selection Sort");
            System.out.println("\t\t\t\t\t\t\t[11] Shell Sort");
            System.out.println("\t\t\t\t\t\t\t[12] Go Back to Menu");

            System.out.print("\n\t\t\t\t\t\t\tEnter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t =**********+=:.        .******+.         :******=. =**********+=:.         =**********+=:.        .=*****+:            =*****************-                 ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@%#*:      .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@%#*:      .#@@@@@@@@@@@@%#+:      .#@@@@@@=           .#@@@@@@@@@@@@@@@@@+          ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@%=     .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@%=     .#@@@@@@@@@@@@@@@%=     .#@@@@@@=           .#@@@@@@@@@@@@@@@@@+         ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@=    .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@@=    .#@@@@@@@@@@@@@@@@@=    .#@@@@@@=           .#@@@@@@@@@@@@@@@@@+           ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@%:   .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@@%:   .#@@@@@@@@@@@@@@@@@@.   .#@@@@@@=           .#@@@@@@@@@@@@@@@@@+         ");
                    System.out.println("\t\t\t\t #@@@@@@@%@@@@@@@@@@=   .@@@@@@%.         =@@@@@@*. #@@@@@@@%@@@@@@@@@@=   .#@@@@@@@%@@@@@@@@@@+   .#@@@@@@=           .#@@@@@@@@@@@@@@@@@+        ");
                    System.out.println("\t\t\t\t #@@@@@@*:-+#@@@@@@@*.  .@@@@@@%.         =@@@@@@*. #@@@@@@*:-+*@@@@@@@#.  .#@@@@@@+:-+#@@@@@@@#   .#@@@@@@=           .#@@@@@@%#########*-              ");
                    System.out.println("\t\t\t\t #@@@@@@=    *@@@@@@#.  .@@@@@@%.         =@@@@@@*. #@@@@@@=    +@@@@@@%.  .#@@@@@@-   .*@@@@@@%.  .#@@@@@@=           .#@@@@@@+                    ");
                    System.out.println("\t\t\t\t #@@@@@@=    .@@@@@@#.  .@@@@@@%.         =@@@@@@*. #@@@@@@=    .@@@@@@%.  .#@@@@@@-    :%@@@@@%.  .#@@@@@@=           .#@@@@@@=           ");
                    System.out.println("\t\t\t\t #@@@@@@=     @@@@@@#.  .@@@@@@%.         =@@@@@@*. #@@@@@@=     %@@@@@%.  .#@@@@@@-    :#@@@@@%.  .#@@@@@@=           .#@@@@@@=             ");
                    System.out.println("\t\t\t\t #@@@@@@=    .@@@@@@*.  .@@@@@@%.         =@@@@@@*. #@@@@@@=    .@@@@@@#.  .#@@@@@@-    :%@@@@@#   .#@@@@@@=           .#@@@@@@=            ");
                    System.out.println("\t\t\t\t #@@@@@@=    .@@@@@@*.  .@@@@@@%.         =@@@@@@*. #@@@@@@=    .@@@@@@#.  .#@@@@@@-    :%@@@@@#   .#@@@@@@=           .#@@@@@@=         ");
                    System.out.println("\t\t\t\t #@@@@@@=   *@@@@@@%:   .@@@@@@%.         =@@@@@@*. #@@@@@@=   +@@@@@@@:   .#@@@@@@-  .+@@@@@@@:   .#@@@@@@=           .#@@@@@@=              ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@=    .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@@+    .#@@@@@@@@@@@@@@@@@+    .#@@@@@@=           .#@@@@@@#+++++++++=.        ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@+.    .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@+.    .#@@@@@@@@@@@@@@@@*     .#@@@@@@=           .#@@@@@@@@@@@@@@@@#:        ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@#:     .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@#-     .#@@@@@@@@@@@@@@@*:     .#@@@@@@=           .#@@@@@@@@@@@@@@@@#:            ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@%+:   .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@%+-   .#@@@@@@@@@@@@@@@@%+-   .#@@@@@@=           .#@@@@@@@@@@@@@@@@#:          ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@@%=  .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@@@%=  .#@@@@@@@@@@@@@@@@@@%=  .#@@@@@@=           .#@@@@@@@@@@@@@@@@#:         ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@@@%- .@@@@@@%.         =@@@@@@*. #@@@@@@@@@@@@@@@@@@@@= .#@@@@@@@@@@@@@@@@@@@%= .#@@@@@@=           .#@@@@@@@@@@@@@@@@#:            ");
                    System.out.println("\t\t\t\t #@@@@@@+::::+@@@@@@@@%..@@@@@@%.         =@@@@@@*. #@@@@@@+::::+@@@@@@@@@..#@@@@@@+:::-+@@@@@@@@#:.#@@@@@@=           .#@@@@@@%*********=.         ");
                    System.out.println("\t\t\t\t #@@@@@@=     .#@@@@@@@-.@@@@@@%.         =@@@@@@*. #@@@@@@=     .*@@@@@@@=.#@@@@@@-     :#@@@@@@@=:#@@@@@@=           .#@@@@@@+         ");
                    System.out.println("\t\t\t\t #@@@@@@=      .@@@@@@@*.@@@@@@@:         +@@@@@@*. #@@@@@@=      :%@@@@@@#.#@@@@@@-      :%@@@@@@*:#@@@@@@=           .#@@@@@@=                   ");
                    System.out.println("\t\t\t\t #@@@@@@=      .#@@@@@@#.@@@@@@@-         #@@@@@@*. #@@@@@@=      .*@@@@@@%.#@@@@@@-      .#@@@@@@*:#@@@@@@=           .#@@@@@@=                   ");
                    System.out.println("\t\t\t\t #@@@@@@=       *@@@@@@%.@@@@@@@*        :%@@@@@@*. #@@@@@@=      .+@@@@@@%.#@@@@@@-       #@@@@@@*-#@@@@@@=           .#@@@@@@=                           ");
                    System.out.println("\t\t\t\t #@@@@@@=      .%@@@@@@# %@@@@@@@-      .*@@@@@@@+  #@@@@@@=      .#@@@@@@%.#@@@@@@-      .%@@@@@@*-#@@@@@@=           .#@@@@@@=               ");
                    System.out.println("\t\t\t\t #@@@@@@=      =@@@@@@@* *@@@@@@@%=-:.:-*@@@@@@@@-  #@@@@@@=      =@@@@@@@#.#@@@@@@-     .+@@@@@@@*:#@@@@@@=           .#@@@@@@+               ");
                    System.out.println("\t\t\t\t #@@@@@@+...:=*@@@@@@@@- -@@@@@@@@@%##%@@@@@@@@@#:  #@@@@@@+...:=+%@@@@@@@=.#@@@@@@=...:=*%@@@@@@@=:#@@@@@@#*********+:.#@@@@@@#*********+-         ");
                    System.out.println("\t\t\t\t #@@@@@@%###%@@@@@@@@@%. .#@@@@@@@@@@@@@@@@@@@@@+   #@@@@@@%###%@@@@@@@@@@..#@@@@@@%###%@@@@@@@@@%:.#@@@@@@@@@@@@@@@@@=.#@@@@@@@@@@@@@@@@@+          ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@@@@=   -@@@@@@@@@@@@@@@@@@@@%:   #@@@@@@@@@@@@@@@@@@@@+ .#@@@@@@@@@@@@@@@@@@@@+ .#@@@@@@@@@@@@@@@@@=.#@@@@@@@@@@@@@@@@@+           ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@@@*.    +@@@@@@@@@@@@@@@@@@%-    #@@@@@@@@@@@@@@@@@@@*  .#@@@@@@@@@@@@@@@@@@@*. .#@@@@@@@@@@@@@@@@@=.#@@@@@@@@@@@@@@@@@+          ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@@@@+.     .+@@@@@@@@@@@@@@@@@-     #@@@@@@@@@@@@@@@@@@+   .#@@@@@@@@@@@@@@@@@@*   .#@@@@@@@@@@@@@@@@@=.#@@@@@@@@@@@@@@@@@+           ");
                    System.out.println("\t\t\t\t #@@@@@@@@@@@@@@@%#-         =#@@@@@@@@@@@@@#:      #@@@@@@@@@@@@@@@%#-    .#@@@@@@@@@@@@@@@%#-    .#@@@@@@@@@@@@@@@@@=.#@@@@@@@@@@@@@@@@@+         ");
                    System.out.println("\t\t\t\t +############*+-:            .-*#%%%%%%%#+:        +############*+-:       +############*+-:      .+################*- +#################=        ");
                    System.out.println("\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Bubble Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tIt is the simplest sort method which performs sorting by repeatedly moving the ");
                    System.out.println("\t\t\t\t\t\t\tlargest element to the highest index of the array. It works on the repeatedly swapping ");
                    System.out.println("\t\t\t\t\t\t\tof adjacent elements until they are not in the intended order. It is called bubble ");
                    System.out.println("\t\t\t\t\t\t\tsort because the movement of array elements is just like the movement of air ");
                    System.out.println("\t\t\t\t\t\t\tbubbles in the water. \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performBubbleSort(array);
                    break;
                case 2:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t .*********+=-:        ******:        .+*****:          :+*#%%%%#*+-.   +*****:         +******=..***************++*******************-              ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@#:     .@@@@@@=        :%@@@@@-        :#@@@@@@@@@@@@%+. @@@@@@=        =@@@@@@@= -@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@=    .@@@@@@=        :%@@@@@-      .*@@@@@@@@@@@@@@@@%.@@@@@@=       -%@@@@@@+  -@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@-   .@@@@@@=        :%@@@@@-     -%@@@@@@@@@@@@@@@@@* @@@@@@=      :%@@@@@@*   -@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@+            ");    
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@%   .@@@@@@=        :%@@@@@-    =%@@@@@@@@@@@@@@@@@@: @@@@@@=     .%@@@@@@*.   -@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@+      ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@%   .@@@@@@=        :%@@@@@-    =%@@@@@@@@@@@@@@@@@@: @@@@@@=     .%@@@@@@*.   -@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@+        ");
                    System.out.println("\t\t\t\t :@@@@@@:   +@@@@@@=  .@@@@@@=        :%@@@@@-  .@@@@@@@@@@#=-::=*%@%-  @@@@@@=   .*@@@@@@%:     -@@@@@@-               .*@@@@@+                  ");    
                    System.out.println("\t\t\t\t :@@@@@@:   +@@@@@@=  .@@@@@@=        :%@@@@@-  .@@@@@@@@@@#=-::=*%@%-  @@@@@@=   .*@@@@@@%:     -@@@@@@-               .*@@@@@+            ");
                    System.out.println("\t\t\t\t :@@@@@@:    %@@@@@=  .@@@@@@=        :%@@@@@- -@@@@@@@#:               @@@@@@=  =@@@@@@@-       -@@@@@%-                *@@@@@+         ");
                    System.out.println("\t\t\t\t :@@@@@@:   .%@@@@@-  .@@@@@@=        :%@@@@@-.*@@@@@@%:                @@@@@@= -@@@@@@@=        -@@@@@%-                *@@@@@+             ");    
                    System.out.println("\t\t\t\t :@@@@@@:  .+@@@@@@.  .@@@@@@=        :%@@@@@-:%@@@@@@=                 @@@@@@=:@@@@@@@+         -@@@@@%-                *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@+=+#@@@@@@=   .@@@@@@=        :%@@@@@-=@@@@@@%                  @@@@@@*%@@@@@@*.         -@@@@@@+::::::::.       *@@@@@+        ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@+    .@@@@@@=        :%@@@@@-+@@@@@@=                  @@@@@@@@@@@@@#.          -@@@@@@@@@@@@@@@+       *@@@@@+              ");    
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@=     .@@@@@@=        :%@@@@@=*@@@@@@:                  @@@@@@@@@@@@%.           -@@@@@@@@@@@@@@@*       *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@%-   .@@@@@@=        :%@@@@@=*@@@@@@.                  @@@@@@@@@@@@@-           -@@@@@@@@@@@@@@@*       *@@@@@+         ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@@*: .@@@@@@=        :%@@@@@=*@@@@@@:                  @@@@@@@@@@@@@%-          -@@@@@@@@@@@@@@@*       *@@@@@+             ");    
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@@@*..@@@@@@=        :%@@@@@=+@@@@@@=                  @@@@@@@@@@@@@@%:         -@@@@@@@@@@@@@@@*       *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@-...:*@@@@@@@-.@@@@@@=        :%@@@@@-=@@@@@@#                  @@@@@@+#@@@@@@@#.        -@@@@@@+--------:       *@@@@@+          ");
                    System.out.println("\t\t\t\t :@@@@@@:     =@@@@@@*.@@@@@@=        -@@@@@@--@@@@@@@-                 @@@@@@=.%@@@@@@@#        -@@@@@%-                *@@@@@+            ");    
                    System.out.println("\t\t\t\t :@@@@@@:     .%@@@@@#.@@@@@@+        =@@@@@@-.#@@@@@@%.                @@@@@@= .#@@@@@@@*.      -@@@@@%-                *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@:      #@@@@@%.@@@@@@#.       +@@@@@@: =@@@@@@@*.               @@@@@@=  :%@@@@@@@*.     -@@@@@%-                *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@:      #@@@@@%.%@@@@@@-      :%@@@@@@. .%@@@@@@@#:         .=   @@@@@@=   -@@@@@@@@+     -@@@@@%-                *@@@@@+           ");    
                    System.out.println("\t\t\t\t :@@@@@@:     -@@@@@@# *@@@@@@@+....-%@@@@@@%   -@@@@@@@@@#-.....-*@%:  @@@@@@=    =@@@@@@@@=    -@@@@@@-                *@@@@@+           ");
                    System.out.println("\t\t\t\t :@@@@@@=:::-*@@@@@@@+ :@@@@@@@@@%%@@@@@@@@@+    +@@@@@@@@@@@@%%@@@@@+  @@@@@@=     +@@@@@@@@-   -@@@@@@%########*.      *@@@@@+         ");
                    System.out.println("\t\t\t\t :@@@@@@%%%@@@@@@@@@%: .#@@@@@@@@@@@@@@@@@@%.     +@@@@@@@@@@@@@@@@@@%: @@@@@@=      +@@@@@@@@-  -@@@@@@@@@@@@@@@%:      *@@@@@+            ");    
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@@@+   -%@@@@@@@@@@@@@@@@@=       =@@@@@@@@@@@@@@@@@@+ @@@@@@=       *@@@@@@@%- -@@@@@@@@@@@@@@@%:      *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@@@*     =@@@@@@@@@@@@@@@@+         -%@@@@@@@@@@@@@@@@%.@@@@@@=       .#@@@@@@@%:-@@@@@@@@@@@@@@@%:      *@@@@@+       ");
                    System.out.println("\t\t\t\t :@@@@@@@@@@@@@@@#=       -#@@@@@@@@@@@@%=           .+%@@@@@@@@@@@@%*: @@@@@@=        :#@@@@@@@#=@@@@@@@@@@@@@@@%:      *@@@@@+           ");   
                    System.out.println("\t\t\t\t .************+=-.         .-+#@@@@@@%*=.              .-*#@@@@@@#*=:   ******:         :********+****************.      =*****=           ");   
                    System.out.println("\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Bucket Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tBucket sort is a sorting algorithm that separate the elements into multiple");
                    System.out.println("\t\t\t\t\t\t\tgroups said to be buckets. Elements in bucket sort are first uniformly divided");
                    System.out.println("\t\t\t\t\t\t\tinto groups called  buckets, and then they are sorted by any other sorting");
                    System.out.println("\t\t\t\t\t\t\talgorithm. After that, elements are gathered in a sorted manner.\n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performBucketSort(array);
                    break;
                case 3:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t               -%@@@@@@@@%=.           :*@@@@@@@@*:           %@@@@@@=            -@@@@@@%   +@@@@@@@@@@#=:                         ");
                    System.out.println("\t\t\t\t             *@@@@@@@@@@@@@@%:       :%@@@@@@@@@@@@@-         @@@@@@@%            @@@@@@@@   +@@@@@@@@@@@@@@+               ");
                    System.out.println("\t\t\t\t           -@@@@@@@@@@@@@@@@@@-     #@@@@@@@@@@@@@@@@#        @@@@@@@@.          .@@@@@@@@   +@@@@@@@@@@@@@@@@                    ");
                    System.out.println("\t\t\t\t          #@@@@@@@@@@@@@@@@@@%     %@@@@@@@@@@@@@@@@@@%       @@@@@@@@*          *@@@@@@@@   +@@@@@@@@@@@@@@@@#               ");    
                    System.out.println("\t\t\t\t         @@@@@@@@@@@@@@@@@@@@-    @@@@@@@@@@@@@@@@@@@@@@     .@@@@@@@@@          @@@@@@@@@   +@@@@@@@@@@@@@@@@@.                   ");
                    System.out.println("\t\t\t\t        #@@@@@@@@@@@@@@@@@@@@    %@@@@@@@@@@@@@@@@@@@@@@%    :@@@@@@@@@:        -@@@@@@@@@.  +@@@@@@--+#@@@@@@@*                    ");
                    System.out.println("\t\t\t\t       *@@@@@@@@@@*:...:*@@@:   +@@@@@@@@@-.  .-%@@@@@@@@+   -@@@@@@@@@%        #@@@@@@@@@-  +@@@@@@    :@@@@@@%              ");
                    System.out.println("\t\t\t\t      :@@@@@@@@@-         :%    @@@@@@@@=        =@@@@@@@@.  =@@@@@@@@@@.       @@@@@@@@@@=  +@@@@@@     %@@@@@@                    ");
                    System.out.println("\t\t\t\t      %@@@@@@@#                #@@@@@@@-          -@@@@@@@#  +@@@@@@@@@@+      +@@@@@@@@@@*  +@@@@@@     #@@@@@@             ");    
                    System.out.println("\t\t\t\t     :@@@@@@@%                 @@@@@@@#            #@@@@@@@  *@@@@@@@@@@@      @@@@@@@@@@@#  +@@@@@@     %@@@@@*            ");
                    System.out.println("\t\t\t\t     *@@@@@@@.                -@@@@@@@.            .@@@@@@@- #@@@@@@@@@@@:    :@@@@@@@@@@@@  +@@@@@@    :@@@@@@:                 ");
                    System.out.println("\t\t\t\t     @@@@@@@*                 #@@@@@@%              %@@@@@@* %@@@@@@@@@@@#    #@@@@@@@@@@@@  +@@@@@@. -%@@@@@@%                      ");
                    System.out.println("\t\t\t\t     @@@@@@@.                 %@@@@@@=              +@@@@@@% @@@@@@*@@@@@@    @@@@@@*@@@@@@  +@@@@@@@@@@@@@@@@.               ");
                    System.out.println("\t\t\t\t    :@@@@@@@                  @@@@@@@:              :@@@@@@@ @@@@@@=*@@@@@=  =@@@@@*=@@@@@@  +@@@@@@@@@@@@@@%.               ");    
                    System.out.println("\t\t\t\t    -@@@@@@%                  @@@@@@@.              .@@@@@@@ @@@@@@=.@@@@@@  @@@@@@:=@@@@@@  +@@@@@@@@@@@@@@@%                   ");
                    System.out.println("\t\t\t\t    -@@@@@@%                  @@@@@@@.              .@@@@@@@.@@@@@@- @@@@@@:.@@@@@@ :@@@@@@. +@@@@@@@@@@@@@@@@@#        ");
                    System.out.println("\t\t\t\t    :@@@@@@@                  @@@@@@@:              :@@@@@@%:@@@@@@: +@@@@@*#@@@@@* .@@@@@@: +@@@@@@@@@@@@@@@@@@%           ");
                    System.out.println("\t\t\t\t     @@@@@@@.                 %@@@@@@=              +@@@@@@#-@@@@@@. .@@@@@@@@@@@@.  @@@@@@- +@@@@@@*++*%@@@@@@@@+         ");
                    System.out.println("\t\t\t\t     @@@@@@@#                 #@@@@@@#              %@@@@@@*=@@@@@@   %@@@@@@@@@@@   @@@@@@= +@@@@@@      *@@@@@@@            ");    
                    System.out.println("\t\t\t\t     *@@@@@@@:                -@@@@@@@             .@@@@@@@-*@@@@@@   =@@@@@@@@@@=   @@@@@@* +@@@@@@       %@@@@@@.     ");
                    System.out.println("\t\t\t\t     :@@@@@@@@                 @@@@@@@*            #@@@@@@@ #@@@@@@   .@@@@@@@@@@.   @@@@@@# +@@@@@@       *@@@@@@-         ");
                    System.out.println("\t\t\t\t      %@@@@@@@@                #@@@@@@@=          =@@@@@@@* @@@@@@@    @@@@@@@@@%    @@@@@@# +@@@@@@       *@@@@@@=          ");
                    System.out.println("\t\t\t\t      .@@@@@@@@@=         =@   .@@@@@@@@+        +@@@@@@@@  @@@@@@@    -@@@@@@@@=    %@@@@@% +@@@@@@       %@@@@@@-     ");
                    System.out.println("\t\t\t\t       +@@@@@@@@@@#*=--*#@@@-   +@@@@@@@@@*-..-*@@@@@@@@@=  @@@@@@#     @@@@@@@@     #@@@@@@ +@@@@@@      *@@@@@@@.        ");    
                    System.out.println("\t\t\t\t        #@@@@@@@@@@@@@@@@@@@@    %@@@@@@@@@@@@@@@@@@@@@@%   @@@@@@*     #@@@@@@%     *@@@@@@ +@@@@@@---+%@@@@@@@@@    ");
                    System.out.println("\t\t\t\t         #@@@@@@@@@@@@@@@@@@@=    @@@@@@@@@@@@@@@@@@@@@@   .@@@@@@+     -@@@@@@-     +@@@@@@ +@@@@@@@@@@@@@@@@@@@=         ");
                    System.out.println("\t\t\t\t          *@@@@@@@@@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@%    .@@@@@@=      @@@@@@      =@@@@@@.+@@@@@@@@@@@@@@@@@@#         ");
                    System.out.println("\t\t\t\t           -@@@@@@@@@@@@@@@@@@:     #@@@@@@@@@@@@@@@@*     :@@@@@@-      #@@@@*      :@@@@@@:+@@@@@@@@@@@@@@@@@#         ");    
                    System.out.println("\t\t\t\t             =@@@@@@@@@@@@@@*.       :@@@@@@@@@@@@@%:      -@@@@@@.      :@@@@:      :@@@@@@-+@@@@@@@@@@@@@@@@:      ");
                    System.out.println("\t\t\t\t               .#@@@@@@@@%:             *@@@@@@@@*         -@@@@@@.       ====       .@@@@@@==@@@@@@@@@@@@*:               ");
                    System.out.println("\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Comb Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tIt is a comparison-based sorting algorithm that is mainly an improvement in ");
                    System.out.println("\t\t\t\t\t\t\tbubble sort. In bubble sort, there is a comparison between the adjacent elements ");
                    System.out.println("\t\t\t\t\t\t\tto sort the given array. So, in bubble sort, the gap size between the elements ");
                    System.out.println("\t\t\t\t\t\t\tthat are compared is 1. Comb sort improves the bubble sort by using a gap of ");
                    System.out.println("\t\t\t\t\t\t\tsize more than 1. The gap in the comb sort starts with the larger value");
                    System.out.println("\t\t\t\t\t\t\tand then shrinks by a factor of 1.3\n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performCombSort(array);
                    break;
                case 4:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t             ....            .....                                                                                         .....             ");
                    System.out.println("\t\t\t\t          :%@@@@@@@*.      *@@@@@@@+      %@@@+      %@@@# #@@@@.      .@@@@+@@@@@@@@@@@@@%#@@@@ =@@@@=       #@@@*      *@@@@@@@*         ");
                    System.out.println("\t\t\t\t        .#@@@@@@@@@@@-   =@@@@@@@@@@%-    %@@@+      %@@@# #@@@@*      .@@@@+@@@@@@@@@@@@@%#@@@@ =@@@@@       #@@@#    -@@@@@@@@@@@=         ");
                    System.out.println("\t\t\t\t       -@@@@@@@@@@@@@.  +@@@@@@@@@@@@@=   %@@@+      %@@@# #@@@@@-     .@@@@+@@@@@@@@@@@@@%#@@@@ =@@@@@#      #@@@#   =@@@@@@@@@@@@@+          ");    
                    System.out.println("\t\t\t\t      -@@@@@@@@@@@@@*  =@@@@@@@@@@@@@@@-  %@@@+      %@@@# #@@@@@@     .@@@@+%%%%@@@@@%%%%##@@@@ =@@@@@@-     #@@@#  -@@@@@@%#%@@@@@*             ");
                    System.out.println("\t\t\t\t     .@@@@@@%:   :#@  :@@@@@%.   :@@@@@@  %@@@+      %@@@# #@@@@@@*    .@@@@-    -@@@@     #@@@@ =@@@@@@@.    #@@@#  %@@@@@.    +@@#             ");
                    System.out.println("\t\t\t\t     #@@@@@:          #@@@@#       #@@@@* %@@@+      %@@@# #@@@@@@@:   .@@@@-    -@@@@     #@@@@ =@@@@@@@*    #@@@# +@@@@@.      -#           ");
                    System.out.println("\t\t\t\t    .@@@@@:          .@@@@@.       :@@@@@ %@@@+      %@@@# #@@@@@@@%   .@@@@-    -@@@@     #@@@@ =@@@@@@@@-   #@@@# @@@@@-                     ");
                    System.out.println("\t\t\t\t    +@@@@*           =@@@@+         #@@@@.%@@@+      %@@@# #@@@@@@@@+  .@@@@-    -@@@@     #@@@@ =@@@@%@@@%   #@@@#.@@@@@                      ");
                    System.out.println("\t\t\t\t    %@@@@:           *@@@@-         =@@@@-%@@@+      %@@@# #@@@#+@@@@: .@@@@-    -@@@@     #@@@@ =@@@@:@@@@*  #@@@#:@@@@*    ..........        ");
                    System.out.println("\t\t\t\t    @@@@@.           #@@@@:         :@@@@+%@@@+      %@@@# #@@@# %@@@% .@@@@-    -@@@@     #@@@@ =@@@@ =@@@@: #@@@#-@@@@=    *@@@@@@@@*       ");
                    System.out.println("\t\t\t\t    @@@@@.           #@@@@:         :@@@@+%@@@+      %@@@# #@@@# :@@@@+.@@@@-    -@@@@     #@@@@ =@@@@  %@@@@ #@@@#-@@@@=    *@@@@@@@@*       ");
                    System.out.println("\t\t\t\t    %@@@@:           *@@@@-         =@@@@-%@@@+      %@@@# #@@@#  +@@@@-@@@@-    -@@@@     #@@@@ =@@@@  :@@@@+#@@@#:@@@@*    *@@@@@@@@*        ");
                    System.out.println("\t\t\t\t    +@@@@*           =@@@@+         %@@@@.%@@@+      @@@@# #@@@#   %@@@@@@@@-    -@@@@     #@@@@ =@@@@   +@@@@@@@@#.@@@@@    .::::@@@@*        ");
                    System.out.println("\t\t\t\t     @@@@@-          .@@@@@.       :@@@@% %@@@#     .@@@@# #@@@#   :@@@@@@@@-    -@@@@     #@@@@ =@@@@    %@@@@@@@# @@@@@-       .@@@@+        ");
                    System.out.println("\t\t\t\t     #@@@@@=          #@@@@#       @@@@@* %@@@@.    -@@@@* #@@@#    +@@@@@@@-    -@@@@     #@@@@ =@@@@    :@@@@@@@# -@@@@@:      #@@@@:        ");
                    System.out.println("\t\t\t\t     .@@@@@@%+-.:=%@. :@@@@@%+..:+@@@@@%  *@@@@%=::+@@@@@- #@@@#    .@@@@@@@-    -@@@@     #@@@@ =@@@@     +@@@@@@#  %@@@@@+   :%@@@@#         ");
                    System.out.println("\t\t\t\t      :@@@@@@@@@@@@@#  =@@@@@@@@@@@@@@@-  :@@@@@@@@@@@@@%  #@@@#     :@@@@@@-    -@@@@     #@@@@ =@@@@      %@@@@@#  :@@@@@@@%@@@@@@@.         ");
                    System.out.println("\t\t\t\t       :@@@@@@@@@@@@@.  +@@@@@@@@@@@@@-    *@@@@@@@@@@@@=  #@@@#      #@@@@@-    -@@@@     #@@@@ =@@@@      :@@@@@#   -@@@@@@@@@@@@@-         ");
                    System.out.println("\t\t\t\t         #@@@@@@@@@@@-   -@@@@@@@@@@%.      #@@@@@@@@@@=   #@@@#       @@@@@-    -@@@@     #@@@@ =@@@@       *@@@@#    .@@@@@@@@@@%.           ");
                    System.out.println("\t\t\t\t          .*@@@@@@%=       =@@@@@@%-         :#@@@@@@*.    #@@@#       -@@@@-    -@@@@     #@@@@ =@@@@        @@@@#      -%@@@@@#:        ");
                    System.out.println("\t\t\t\t            ....            ....               ....                                                                       ....             ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Counting Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tThis sorting technique doesn't perform sorting by comparing elements. It performs ");
                    System.out.println("\t\t\t\t\t\t\tperforms sorting by counting objects having distinct key values like hashing. After ");
                    System.out.println("\t\t\t\t\t\t\tthat, it performs some arithmetic operations to calculate each object's index position");
                    System.out.println("\t\t\t\t\t\t\tin the output sequence. Counting sort is not used as a general-purpose sorting algorithm.");
                    System.out.println("\n\t\t\t\t\t\t\tCounting sort is effective when range is not greater than number of objects to be");
                    System.out.println("\t\t\t\t\t\t\tsorted. It can be used to sort the negative input values.\n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performCountingSort(array);
                    break;
                case 5:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t\t\t  ......           .......   ..................            .......            ..............               ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=           @@@@@@@:           *@@@@@@@@@@@@@@@*:           ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=          -@@@@@@@#           *@@@@@@@@@@@@@@@@@%.       ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=          @@@@@@@@@.          *@@@@@@@@@@@@@@@@@@@: ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=         :@@@@@@@@@+          *@@@@@@@@@@@@@@@@@@@@.        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=         *@@@@@@@@@@          *@@@@@@@@@@@@@@@@@@@@%          ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=        .@@@@@@@@@@@:         *@@@@@@#---=%@@@@@@@@@-        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                   =@@@@@@@@@@@%         *@@@@@@+     .@@@@@@@@*        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                   %@@@@@@@@@@@@.        *@@@@@@+       @@@@@@@%   ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                  :@@@@@@@@@@@@@*        *@@@@@@+       #@@@@@@@            ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                  #@@@@@@*@@@@@@@        *@@@@@@+       *@@@@@@@         ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                  @@@@@@@.@@@@@@@=       *@@@@@@+       #@@@@@@%          ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-                 +@@@@@@# -@@@@@@%       *@@@@@@+       @@@@@@@%   ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@%**********@@@@@@@-  @@@@@@@#**********       @@@@@@@-  @@@@@@@:      *@@@@@@+      #@@@@@@@*        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@@      -@@@@@@%   *@@@@@@*      *@@@@@@*   :*@@@@@@@@@:      ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@@      @@@@@@@+   .@@@@@@@.     *@@@@@@@@@@@@@@@@@@@@%          ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@@      @@@@@@@+   .@@@@@@@.     *@@@@@@@@@@@@@@@@@@@@%     ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@@     *@@@@@@%     =@@@@@@@     *@@@@@@@@@@@@@@@@@@@:         ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@@     @@@@@@@-     .@@@@@@@:    *@@@@@@@@@@@@@@@@@%.       ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@%++++++++++@@@@@@@-  @@@@@@@*++++++++++    =@@@@@@@:::::::%@@@@@@#    *@@@@@@@@@@@@@@@@:      ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-              %@@@@@@@@@@@@@@@@@@@@@@    *@@@@@@#=====-.   ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-             :@@@@@@@@@@@@@@@@@@@@@@@+   *@@@@@@+           ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-             *@@@@@@@@@@@@@@@@@@@@@@@@   *@@@@@@+        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-             @@@@@@@@@@@@@@@@@@@@@@@@@-  *@@@@@@+       ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-            =@@@@@@@@@@@@@@@@@@@@@@@@@%  *@@@@@@+  ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@-            @@@@@@@@@@@@@@@@@@@@@@@@@@@. *@@@@@@+           ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=:@@@@@@@:            @@@@@@@* *@@@@@@+     ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@=%@@@@@@%             +@@@@@@@ *@@@@@@+      ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@+@@@@@@@=             .@@@@@@@-*@@@@@@+    ");    
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@%@@@@@@@               #@@@@@@%#@@@@@@+        ");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@@@@@@@@#               -@@@@@@@#@@@@@@+");
                    System.out.println("\t\t\t\t\t\t +@@@@@@*          @@@@@@@-  @@@@@@@@@@@@@@@@@@@@@@@@@#               -@@@@@@@#@@@@@@+     ");
                    System.out.println("\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Heap Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tHeap sort processes the elements by creating the min-heap or max-heap using");
                    System.out.println("\t\t\t\t\t\t\tthe elements of the given array. Min-heap or max-heap represents the ordering ");
                    System.out.println("\t\t\t\t\t\t\tof array in which the root element represents the minimum or maximum element");
                    System.out.println("\t\t\t\t\t\t\telement of the array. \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performHeapSort(array);
                    break;
                case 6:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t  ****+ .****-       :****:     .*%%%#*-   .***********- ********+-     =*************+=****       :*#%%%#+.      :****:       :****.         ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@.      :@@@@:    +@@@@@@@@%= .@@@@@@@@@@@+ @@@@@@@@@@@+   *@@@@@@@@@@@@@%*@@@@.    :#@@@@@@@@@*.    :@@@@%.      :@@@@:       ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@.      :@@@@:    +@@@@@@@@%= .@@@@@@@@@@@+ @@@@@@@@@@@+   *@@@@@@@@@@@@@%*@@@@.    :#@@@@@@@@@*.    :@@@@%.      :@@@@:      ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@@-     :@@@@:  -@@@@@@@@@@@- .@@@@@@@@@@@+ @@@@@@@@@@@@@+ *@@@@@@@@@@@@@%*@@@@.  =@@@@@@@@@@@@@@@.  :@@@@@@:     :@@@@:  ");    
                    System.out.println("\t\t\t\t  @@@@% :@@@@@@@     :@@@@:  %@@@@=::-#@#  .@@@@+------. @@@@#..:#@@@@@ :----%@@@@----:*@@@@. .@@@@@@#=-=%@@@@@@. :@@@@@@@.    :@@@@:    ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@@@*    :@@@@: .@@@@*     :.  .@@@@-        @@@@*   .@@@@@.     %@@@@     *@@@@. %@@@@%:     =@@@@@+ :@@@@@@@*    :@@@@:        ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@@@@-   :@@@@: .@@@@*         .@@@@-        @@@@*    #@@@@.     %@@@@     *@@@@.:@@@@@:       -@@@@@.:@@@@@@@@-   :@@@@:      ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@@@@@@   :@@@@:  @@@@@*        .@@@@-        @@@@*    %@@@@.     %@@@@     *@@@@.*@@@@+         %@@@@=:@@@@@@@@%   :@@@@:      ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@+@@@@*  :@@@@:  -@@@@@@*.     .@@@@#++++++. @@@@*   -@@@@@      %@@@@     *@@@@.%@@@@:         +@@@@*:@@@@*@@@@*  :@@@@: ");    
                    System.out.println("\t\t\t\t  @@@@% :@@@@:+@@@@- :@@@@:   *@@@@@@@#:   .@@@@@@@@@@@: @@@@%+*#@@@@@=      %@@@@     *@@@@.@@@@@.         :@@@@#:@@@@:*@@@@: :@@@@:   ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@: %@@@@.:@@@@:    +@@@@@@@@=  .@@@@@@@@@@@: @@@@@@@@@@@@*       %@@@@     *@@@@:@@@@@          .@@@@#:@@@@:.@@@@@ :@@@@:          ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@: :@@@@*:@@@@:      #@@@@@@@+ .@@@@@@@@@@@: @@@@@@@@@@@+        %@@@@     *@@@@:@@@@@.         :@@@@#:@@@@: :@@@@+:@@@@:       ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:  *@@@@*@@@@:       .+@@@@@@:.@@@@*======. @@@@@@@@@@:         %@@@@     *@@@@.%@@@@.         +@@@@*:@@@@:  *@@@@+@@@@:        ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:   %@@@@@@@@:         :%@@@@*.@@@@-        @@@@*+@@@@%.        %@@@@     *@@@@.*@@@@=         %@@@@=:@@@@:  .%@@@@@@@@:    ");    
                    System.out.println("\t\t\t\t  @@@@% :@@@@:   -@@@@@@@@:  :       =@@@@#.@@@@-        @@@@* #@@@@#        %@@@@     *@@@@.-@@@@@.       -@@@@@.:@@@@:   -@@@@@@@@:      ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:    +@@@@@@@: :@%.     +@@@@#.@@@@-        @@@@*  %@@@@#       %@@@@     *@@@@. @@@@@@.     -@@@@@+ :@@@@:    *@@@@@@@:         ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:    .@@@@@@@: #@@@%=:-*@@@@@=.@@@@*======: @@@@*  .@@@@@+      %@@@@     *@@@@. :@@@@@@%++*%@@@@@@. :@@@@:    .@@@@@@@:       ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:     :@@@@@@:-@@@@@@@@@@@@@@..@@@@@@@@@@@+ @@@@*   -@@@@@=     %@@@@     *@@@@.  +@@@@@@@@@@@@@@@:  :@@@@:     -@@@@@@:       ");
                    System.out.println("\t\t\t\t  @@@@% :@@@@:      *@@@@@:+@@@@@@@@@@@@@= .@@@@@@@@@@@+ @@@@*    +@@@@@-    %@@@@     *@@@@.   +@@@@@@@@@@@@%:   :@@@@:      *@@@@@:   ");    
                    System.out.println("\t\t\t\t  @@@@% :@@@@:       %@@@@: .%@@@@@@@@@@-  .@@@@@@@@@@@+ @@@@*     #@@@@@.   %@@@@     *@@@@.    :@@@@@@@@@@#     :@@@@:      .@@@@@:     ");
                    System.out.println("\t\t\t\t  ++++= .++++.       :++++.   .=#@@@@*-    .+++++++++++- ++++-      +++++=   +++++     =++++       :+%@@@#=.      .++++.       :++++.          ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Insertion Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tInsertion sort works similar to the sorting of playing cards in hands. It is");
                    System.out.println("\t\t\t\t\t\t\tassumed that the first card is already sorted in the card game, and then we ");
                    System.out.println("\t\t\t\t\t\t\tselect an unsorted card. If the selected unsorted card is greater than the first");
                    System.out.println("\t\t\t\t\t\t\tcard, it will be placed at the right side; otherwise, it will be placed");
                    System.out.println("\t\t\t\t\t\t\tplaced at the left side. Similarly, all unsorted cards are taken and put");
                    System.out.println("\t\t\t\t\t\t\tput in their exact place. \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");


                    printArray(array);
                    performInsertionSort(array);
                    break;
                case 7:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t    .++++++:           :+++++=.  .++++++++++++++=. -+++++++++=-:                .=+*###*+=:        -++++++++++++++=            ");
                    System.out.println("\t\t\t\t    -@@@@@@*           *@@@@@@=  -@@@@@@@@@@@@@@@: #@@@@@@@@@@@@%+.           .+%@@@@@@@@@@#:      #@@@@@@@@@@@@@@#.        ");
                    System.out.println("\t\t\t\t    =@@@@@@@.         .@@@@@@@=  -@@@@@@@@@@@@@@@: #@@@@@@@@@@@@@@%:         -@@@@@@@@@@@@@@@+.    #@@@@@@@@@@@@@@#.        ");
                    System.out.println("\t\t\t\t    +@@@@@@@+         =@@@@@@@+  -@@@@@@@@@@@@@@@: #@@@@@@@@@@@@@@@@-       =@@@@@@@@@@@@@@@@@*.   #@@@@@@@@@@@@@@#.    ");    
                    System.out.println("\t\t\t\t    *@@@@@@@%.        %@@@@@@@*  -@@@@@@@@@@@@@@@: #@@@@@@@@@@@@@@@@%.     =@@@@@@@@@@@@@@@@@@@#   #@@@@@@@@@@@@@@#.       ");
                    System.out.println("\t\t\t\t    #@@@@@@@@-       -@@@@@@@@*  -@@@@@@%%%%%%%%%: #@@@@@#**#%@@@@@@@=    :@@@@@@@@%###%@@@@@@@:   #@@@@@@%%%%%%%%*.         ");
                    System.out.println("\t\t\t\t    #@@@@@@@@*       *@@@@@@@@#  -@@@@@#           #@@@@@-    +@@@@@@*   .%@@@@@@@+:    :+@@@%-    #@@@@@-                 ");
                    System.out.println("\t\t\t\t   .%@@@@@@@@%.     :%@@@@@@@@#. -@@@@@#           #@@@@@-    .%@@@@@*   +@@@@@@@-        -@@=     #@@@@@-                  ");
                    System.out.println("\t\t\t\t   .@@@@@@@@@@-     =@@@@@@@@@%. -@@@@@#           #@@@@@-     *@@@@@#. .#@@@@@@=          =+      #@@@@@-               ");    
                    System.out.println("\t\t\t\t   :@@@@@@@@@@#     #@@@@@@@@@%: -@@@@@#           #@@@@@-     *@@@@@#. -@@@@@@#.                  #@@@@@-        ");
                    System.out.println("\t\t\t\t   :@@@@@@@@@@@:   :@@@@@@@@@@%: -@@@@@#           #@@@@@-    .%@@@@@*  =@@@@@@=                   #@@@@@-               ");
                    System.out.println("\t\t\t\t   -@@@@@@@@@@@*   +@@@@@@@@@@@- -@@@@@@++++++++=  #@@@@@-   .+@@@@@@=  *@@@@@@.                   #@@@@@#++++++++-          ");
                    System.out.println("\t\t\t\t   =@@@@@#*@@@@@. .@@@@@+#@@@@@- -@@@@@@@@@@@@@@#. #@@@@@*+++#@@@@@@%:  #@@@@@%      :+++++++++++= #@@@@@@@@@@@@@@+          ");
                    System.out.println("\t\t\t\t   =@@@@@*-@@@@@= =@@@@@-*@@@@@= -@@@@@@@@@@@@@@#. #@@@@@@@@@@@@@@@@-   #@@@@@#      =@@@@@@@@@@@%.#@@@@@@@@@@@@@@+  ");    
                    System.out.println("\t\t\t\t   +@@@@@+.%@@@@#.%@@@@#.*@@@@@= -@@@@@@@@@@@@@@#. #@@@@@@@@@@@@@@@+    %@@@@@#      =@@@@@@@@@@@%.#@@@@@@@@@@@@@@+     ");
                    System.out.println("\t\t\t\t   *@@@@@+ +@@@@@*@@@@@+ =@@@@@+ -@@@@@@@@@@@@@@#. #@@@@@@@@@@@@@#-     #@@@@@%      =@@@@@@@@@@@%.#@@@@@@@@@@@@@@+         ");
                    System.out.println("\t\t\t\t   *@@@@@= :@@@@@@@@@@@: -@@@@@* -@@@@@@********=  #@@@@@@@@@@@@+       *@@@@@@.     =@@@@@@@@@@@%.#@@@@@#********-       ");
                    System.out.println("\t\t\t\t   #@@@@@-  #@@@@@@@@@%  :@@@@@* -@@@@@#           #@@@@@=%@@@@@@-      =@@@@@@=           :@@@@@%.#@@@@@-           ");
                    System.out.println("\t\t\t\t  .#@@@@@:  =@@@@@@@@@=  :@@@@@# -@@@@@#           #@@@@@--%@@@@@%:     -@@@@@@#.          -@@@@@%.#@@@@@-  ");    
                    System.out.println("\t\t\t\t  .#@@@@@:  =@@@@@@@@@=  :@@@@@# -@@@@@#           #@@@@@--%@@@@@%:     -@@@@@@#.          -@@@@@%.#@@@@@-      ");
                    System.out.println("\t\t\t\t  :%@@@@@.   *@@@@@@@*    @@@@@%.-@@@@@#           #@@@@@-  *@@@@@@#     =@@@@@@@-        +@@@@@@= #@@@@@-          ");
                    System.out.println("\t\t\t\t  :@@@@@@    =@@@@@@@-    %@@@@@.-@@@@@#           #@@@@@-   #@@@@@@*    .%@@@@@@@+:    -*@@@@@@%. #@@@@@-     ");
                    System.out.println("\t\t\t\t  :@@@@@%    :%@@@@@%.    %@@@@@:-@@@@@@%%%%%%%%%: #@@@@@-   :%@@@@@@=    :@@@@@@@@@%##%@@@@@@@@=  #@@@@@@%%%%%%%%*.      ");
                    System.out.println("\t\t\t\t  -@@@@@%     *@@@@@*     #@@@@@:-@@@@@@@@@@@@@@@: #@@@@@-    -@@@@@@@-    -@@@@@@@@@@@@@@@@@@@*   #@@@@@@@@@@@@@@#.  ");    
                    System.out.println("\t\t\t\t  =@@@@@#     -@@@@@-     *@@@@@--@@@@@@@@@@@@@@@: #@@@@@-     +@@@@@@%-    =@@@@@@@@@@@@@@@@@+    #@@@@@@@@@@@@@@#.    ");
                    System.out.println("\t\t\t\t  =@@@@@*     .@@@@%.     +@@@@@=-@@@@@@@@@@@@@@@: #@@@@@-      *@@@@@@%:    :%@@@@@@@@@@@@@@=     #@@@@@@@@@@@@@@#.        ");
                    System.out.println("\t\t\t\t  +@@@@@+      *@@@*      =@@@@@*-@@@@@@@@@@@@@@@: #@@@@@-       #@@@@@@#.     +%@@@@@@@@@%*.      #@@@@@@@@@@@@@@#.       ");
                    System.out.println("\t\t\t\t  -+++++:      .---.      :+++++-.++++++++++++++=. -+++++.       :=+++++=:      .=+*###*+=.        -++++++++++++++=         ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Merge Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tMerge sort is similar to the quick sort algorithm as it uses the divide and conquer");
                    System.out.println("\t\t\t\t\t\t\tapproach to sort the elements. It is one of the most popular and efficient sorting ");
                    System.out.println("\t\t\t\t\t\t\talgorithm. It divides the given list into two equal halves, calls itself for the two ");
                    System.out.println("\t\t\t\t\t\t\thalves and then merges the two sorted halves. We have to define the merge() function ");
                    System.out.println("\t\t\t\t\t\t\tto perform the merging.    \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performMergeSort(array);
                    break;
                case 8:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t\t           :+@@@%=.        .::::.       .:::::  :::::          .=%@@@*-    .::::.        ::::::               ");
                    System.out.println("\t\t\t\t\t         =%@@@@@@@@#=      +@@@@*       -@@@@@ :@@@@@.      .+%@@@@@@@@@#= +@@@@#       *@@@@@*             ");
                    System.out.println("\t\t\t\t\t       :@@@@@@@@@@@@@%.    +@@@@*       -@@@@@ :@@@@@.     =@@@@@@@@@@@@@@#+@@@@#      +@@@@@@.          ");
                    System.out.println("\t\t\t\t\t      -%@@@@@@@@@@@@@@%:   +@@@@*       -@@@@@ :@@@@@.    *@@@@@@@@@@@@@@@:+@@@@#     =@@@@@%.   ");    
                    System.out.println("\t\t\t\t\t     -@@@@@@@@@@@@@@@@@%.  +@@@@*       -@@@@@ :@@@@@.   *@@@@@@@@@@@@@@@* +@@@@#    :@@@@@@:         ");
                    System.out.println("\t\t\t\t\t     %@@@@@@@+==*@@@@@@@*  +@@@@*       -@@@@@ :@@@@@.  +@@@@@@@@*===+%@@: +@@@@#   :@@@@@@-         ");
                    System.out.println("\t\t\t\t\t    +@@@@@@=      *@@@@@@- +@@@@*       -@@@@@ :@@@@@. :@@@@@@@=       :*  +@@@@#  .%@@@@@=            ");
                    System.out.println("\t\t\t\t\t   .@@@@@@-        +@@@@@% +@@@@*       -@@@@@ :@@@@@. #@@@@@%.            +@@@@#  #@@@@@+         ");
                    System.out.println("\t\t\t\t\t   =@@@@@*         .%@@@@@:+@@@@*       -@@@@@ :@@@@@.:@@@@@@:             +@@@@# *@@@@@*      ");    
                    System.out.println("\t\t\t\t\t   *@@@@@-          +@@@@@-+@@@@*       -@@@@@ :@@@@@.=@@@@@+              +@@@@#+@@@@@#.       ");
                    System.out.println("\t\t\t\t\t   #@@@@@.          :@@@@@++@@@@*       -@@@@@ :@@@@@:#@@@@@.              +@@@@@@@@@@%           ");
                    System.out.println("\t\t\t\t\t   %@@@@%           .@@@@@*+@@@@*       -@@@@@ :@@@@@:%@@@@%               +@@@@@@@@@@:              ");
                    System.out.println("\t\t\t\t\t   %@@@@%           .@@@@@*+@@@@*       -@@@@@ :@@@@@:%@@@@%               +@@@@@@@@@@+     ");
                    System.out.println("\t\t\t\t\t   %@@@@@           .@@@@@++@@@@*       -@@@@@ :@@@@@:%@@@@%               +@@@@@@@@@@@+    ");    
                    System.out.println("\t\t\t\t\t   #@@@@@.          -@@@@@=+@@@@*       -@@@@@ :@@@@@.#@@@@@:              +@@@@##@@@@@@-     ");
                    System.out.println("\t\t\t\t\t   *@@@@@-          *@@@@@-+@@@@#       =@@@@@ :@@@@@.=@@@@@#              +@@@@#.%@@@@@@-        ");
                    System.out.println("\t\t\t\t\t   -@@@@@#         .%@@@@@.+@@@@%       +@@@@@ :@@@@@..@@@@@@=             +@@@@# :%@@@@@@:       ");
                    System.out.println("\t\t\t\t\t   .@@@@@@=        #@@@@@# =@@@@@:      %@@@@% :@@@@@. *@@@@@@-            +@@@@#  :@@@@@@%.       ");
                    System.out.println("\t\t\t\t\t    =@@@@@@*-.  .-%@@@@@@: :@@@@@%:   .*@@@@@* :@@@@@. :@@@@@@@*-     :=#  +@@@@#   -@@@@@@%.  ");    
                    System.out.println("\t\t\t\t\t     #@@@@@@@@%%@@@@@@@@+  .%@@@@@@%%%@@@@@@@- :@@@@@.  -@@@@@@@@@%%%%@@@- +@@@@#    -@@@@@@#       ");
                    System.out.println("\t\t\t\t\t     :@@@@@@@@@@@@@@@@@#.   *@@@@@@@@@@@@@@@%. :@@@@@.   +@@@@@@@@@@@@@@@# +@@@@#     +@@@@@@#.            ");
                    System.out.println("\t\t\t\t\t     :@@@@@@@@@@@@@@@@@#.   *@@@@@@@@@@@@@@@%. :@@@@@.   +@@@@@@@@@@@@@@@# +@@@@#     +@@@@@@#.           ");
                    System.out.println("\t\t\t\t\t       :#@@@@@@@@@@@@+       .#@@@@@@@@@@@@-   :@@@@@.     :#@@@@@@@@@@@@@=+@@@@#       #@@@@@@+      ");
                    System.out.println("\t\t\t\t\t         :@@@@@@@@@*.    -     =@@@@@@@@@*.    :@@@@@.       :%@@@@@@@@@+. +@@@@#        %@@@@@@=  ");    
                    System.out.println("\t\t\t\t\t           +%@@@@@%+=--=#@-      :=+++=-.       .....          .-++++-.     .....         .......      ");
                    System.out.println("\t\t\t\t\t          %@@@@@@@@@@@@@@@#          ");
                    System.out.println("\t\t\t\t\t          #@@@@@@@@@@@@@@@@@:       ");
                    System.out.println("\t\t\t\t\t        .@@@@@@@@@@@@@@@@@%        ");
                    System.out.println("\t\t\t\t\t         -=.   .-*@@@@@@@#.  ");    
                    System.out.println("\t\t\t\t\t                   =%@@%-                 ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Quick Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tQuicksort is the widely used sorting algorithm that makes n log n comparisons ");
                    System.out.println("\t\t\t\t\t\t\tin average case for sorting an array of n elements. It is a faster and highly efficient");
                    System.out.println("\t\t\t\t\t\t\tsorting algorithm. This algorithm follows the divide and conquer approach. Divide ");
                    System.out.println("\t\t\t\t\t\t\tand conquer is a technique of breaking down the algorithms into subproblems, then ");
                    System.out.println("\t\t\t\t\t\t\tsolving the subproblems, and combining the results back together to solve the ");
                    System.out.println("\t\t\t\t\t\t\toriginal problem.                    \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performQuickSort(array);
                    break;
                case 9:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t\t =@@@@@@@@@@@#+:                %@@@@@.         =@@@@@@@@@%*-.         -@@@@@# #@@@@@@+         *@@@@@@%.          ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@@#-             -@@@@@@+         =@@@@@@@@@@@@@*-       -@@@@@# :%@@@@@%-       =@@@@@@@-        ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@@@@=            #@@@@@@@.        =@@@@@@@@@@@@@@@*.     -@@@@@#  =@@@@@@#.     :%@@@@@@=      ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@@@@@-          :@@@@@@@@=        =@@@@@@@@@@@@@@@@#.    -@@@@@#   #@@@@@@+    .*@@@@@@#.    ");    
                    System.out.println("\t\t\t\t\t =@@@@@@%%%@@@@@@@@*          *@@@@@@@@#        =@@@@@@@@@@@@@@@@@#.   -@@@@@#   .%@@@@@@-   =@@@@@@%:      ");
                    System.out.println("\t\t\t\t\t =@@@@@%-::-+@@@@@@@.        :%@@@@@@@@@-       =@@@@@%*+*%@@@@@@@@#.  -@@@@@#    =@@@@@@%. :%@@@@@@=         ");
                    System.out.println("\t\t\t\t\t =@@@@@#.    +@@@@@@-        =@@@@@@@@@@+       =@@@@@#.  .-%@@@@@@@+  -@@@@@#     *@@@@@@*.%@@@@@@*        ");
                    System.out.println("\t\t\t\t\t =@@@@@#.    .@@@@@@=        *@@@@@@@@@@%.      =@@@@@#.    .#@@@@@@%: -@@@@@#     :%@@@@@@#@@@@@@%.       ");
                    System.out.println("\t\t\t\t\t =@@@@@#.     %@@@@@+       :@@@@@@%@@@@@-      =@@@@@#.     .#@@@@@@+ -@@@@@#      =@@@@@@@@@@@@@- ");    
                    System.out.println("\t\t\t\t\t =@@@@@#.     @@@@@@=       +@@@@@+=@@@@@#      =@@@@@#.      -@@@@@@# -@@@@@#       *@@@@@@@@@@@+      ");
                    System.out.println("\t\t\t\t\t =@@@@@#.    -@@@@@@:       @@@@@@:.%@@@@@:     =@@@@@#.       %@@@@@@.-@@@@@#        %@@@@@@@@@%.           ");
                    System.out.println("\t\t\t\t\t =@@@@@#.  .-@@@@@@%       =@@@@@#  +@@@@@*     =@@@@@#.       =@@@@@@--@@@@@#        -@@@@@@@@@:          ");
                    System.out.println("\t\t\t\t\t =@@@@@@***%@@@@@@@=       %@@@@@=  -@@@@@@.    =@@@@@#.       :@@@@@@=-@@@@@#         *@@@@@@@=       ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@@@@#.      -@@@@@%:  .#@@@@@=    =@@@@@#.       .@@@@@@=-@@@@@#        .#@@@@@@@#");    
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@@@#.       *@@@@@*    +@@@@@#.   =@@@@@#.       :@@@@@@=-@@@@@#        +@@@@@@@@@+     ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@#+.       :%@@@@@-    :@@@@@@-   =@@@@@#.       -@@@@@@--@@@@@#       -@@@@@@@@@@@-         ");
                    System.out.println("\t\t\t\t\t =@@@@@@@@@@@@@#+.       :%@@@@@-    :@@@@@@-   =@@@@@#.       -@@@@@@--@@@@@#       -@@@@@@@@@@@-        ");
                    System.out.println("\t\t\t\t\t =@@@@@#+@@@@@@#.        #@@@@@@@@@@@@@@@@@@%.  =@@@@@#.      .@@@@@@%.-@@@@@#      #@@@@@@@@@@@@@*       ");
                    System.out.println("\t\t\t\t\t =@@@@@#.*@@@@@@*       :@@@@@@@@@@@@@@@@@@@@=  =@@@@@#.      +@@@@@@* -@@@@@#     =@@@@@@%*@@@@@@@=  ");    
                    System.out.println("\t\t\t\t\t =@@@@@#. *@@@@@@*      *@@@@@@@@@@@@@@@@@@@@%  =@@@@@#.     -%@@@@@@= -@@@@@#    :%@@@@@@= *@@@@@@@:     ");
                    System.out.println("\t\t\t\t\t =@@@@@#. .%@@@@@@+    .@@@@@@@@@@@@@@@@@@@@@@- =@@@@@#.    =@@@@@@@#. -@@@@@#    %@@@@@@#   #@@@@@@#.        ");
                    System.out.println("\t\t\t\t\t =@@@@@#.  -@@@@@@@-   +@@@@@@@@@@@@@@@@@@@@@@* =@@@@@#...-#@@@@@@@@-  -@@@@@#   *@@@@@@@.   :@@@@@@@+        ");
                    System.out.println("\t\t\t\t\t =@@@@@#.   =@@@@@@%: .%@@@@@*::::::::::+@@@@@%:=@@@@@@%%@@@@@@@@@@+   -@@@@@#  -@@@@@@@-     +@@@@@@@-       ");
                    System.out.println("\t\t\t\t\t =@@@@@#.    *@@@@@@%.-@@@@@@-          :%@@@@@+=@@@@@@@@@@@@@@@@@+    -@@@@@# :%@@@@@@+      .#@@@@@@%. ");    
                    System.out.println("\t\t\t\t\t =@@@@@#.     #@@@@@@%#@@@@@%.           *@@@@@#+@@@@@@@@@@@@@@@@+     -@@@@@# *@@@@@@%.       .@@@@@@@%      ");
                    System.out.println("\t\t\t\t\t =@@@@@#.     :%@@@@@@@@@@@@+            -@@@@@@#@@@@@@@@@@@@@@#-      -@@@@@#=@@@@@@@-         =@@@@@@@+         ");
                    System.out.println("\t\t\t\t\t =@@@@@#.      =@@@@@@@@@@@@.             %@@@@@@@@@@@@@@@@@%*-.       -@@@@@%@@@@@@@+           *@@@@@@@-       ");
                    System.out.println("\t\t\t\t\t :+++++=        =++++++++++=              -+++++++++++++++=:.          .+++++++++++++            .+++++++=      ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Radix Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tRadix sort is the linear sorting algorithm that is used for integers. In ");
                    System.out.println("\t\t\t\t\t\t\tRadix sort, there is digit by digit sorting is performed that is started from");
                    System.out.println("\t\t\t\t\t\t\tthe least significant digit to the most significant digit. ");
                    System.out.println("\t\t\t\t\t\t\tThe process of radix sort works similar to the sorting of students names, ");
                    System.out.println("\t\t\t\t\t\t\taccording to the alphabetical order. In this case, there are 26 radix formed");
                    System.out.println("\t\t\t\t\t\t\tdue to the 26 alphabets in English.                     \n");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);
                    performRadixSort(array);
                    break;
                case 10:
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t        =####=   :********** ****.      =*********-      :*####+. ************-***+      :*####-      +***-      :***=         ");
                    System.out.println("\t\t\t\t      :@@@@@@@@* -@@@@@@@@@@ %@@@.      #@@@@@@@@@+    -%@@@@@@@@%@@@@@@@@@@@@+@@@%    :%@@@@@@@@=    #@@@@.     -@@@*        ");
                    System.out.println("\t\t\t\t     :@@@@@@@@@% -@@@@@@@@@@ %@@@.      #@@@@@@@@@+   %@@@@@@@@@@@@@@@@@@@@@@@+@@@%   -@@@@@@@@@@@#   #@@@@#     -@@@*         ");
                    System.out.println("\t\t\t\t     %@@@@@@@@@: -@@@@@@@@@@ %@@@.      #@@@@@@@@@+  %@@@@@@@@@@@+@@@@@@@@@@@@+@@@%  -@@@@@@@@@@@@@#  #@@@@@-    -@@@* ");    
                    System.out.println("\t\t\t\t    .@@@@    :%  -@@@*       %@@@.      #@@@:       *@@@@@*.. .=@     %@@@.   .@@@% .@@@@@-.  :@@@@@- #@@@@@@    -@@@*       ");
                    System.out.println("\t\t\t\t    :@@@#        -@@@*       %@@@.      #@@@:      .@@@@@             %@@@.   .@@@% +@@@@.      @@@@@ #@@@@@@#   -@@@*          ");
                    System.out.println("\t\t\t\t    .@@@@*       -@@@*       %@@@.      #@@@:      +@@@@              %@@@.   .@@@% @@@@*       .@@@@.#@@@@@@@:  -@@@*         ");
                    System.out.println("\t\t\t\t     *@@@@@+     -@@@#=====: %@@@.      #@@@+===== @@@@#              %@@@.   .@@@%:@@@@.        @@@@+#@@@=@@@@  -@@@*       ");
                    System.out.println("\t\t\t\t     *@@@@@+     -@@@#=====: %@@@.      #@@@+===== @@@@#              %@@@.   .@@@%:@@@@.        @@@@+#@@@=@@@@  -@@@*  ");    
                    System.out.println("\t\t\t\t       #@@@@@@@  -@@@@@@@@@= %@@@.      #@@@@@@@@@.@@@@               %@@@.   .@@@%=@@@@         %@@@%#@@@: @@@@:-@@@*     ");
                    System.out.println("\t\t\t\t         #@@@@@@ -@@@@@@@@@- %@@@.      #@@@@@@@@@.@@@@=              %@@@.   .@@@%-@@@@         @@@@*#@@@: .@@@@-@@@*         ");
                    System.out.println("\t\t\t\t           %@@@@+-@@@*       %@@@.      #@@@:      @@@@%              %@@@.   .@@@%.@@@@:        @@@@-#@@@:  *@@@@@@@*         ");
                    System.out.println("\t\t\t\t            @@@@%-@@@*       %@@@.      #@@@:      -@@@@+             %@@@.   .@@@% %@@@#       +@@@@ #@@@:   @@@@@@@*       ");
                    System.out.println("\t\t\t\t    :@-     %@@@#-@@@*       %@@@.      #@@@:       @@@@@*      -     %@@@.   .@@@% =@@@@*     -@@@@% #@@@:   :@@@@@@*  ");    
                    System.out.println("\t\t\t\t    %@@@=::#@@@@=-@@@#:::::: %@@@-:::::.#@@@=:::::. :@@@@@@%*=%@@:    %@@@.   .@@@%  %@@@@@*-+@@@@@@  #@@@:    *@@@@@*      ");
                    System.out.println("\t\t\t\t   =@@@@@@@@@@@@ -@@@@@@@@@@ %@@@@@@@@@-#@@@@@@@@@+  -@@@@@@@@@@@@    %@@@.   .@@@%  .@@@@@@@@@@@@@:  #@@@:     @@@@@*        ");
                    System.out.println("\t\t\t\t   :%@@@@@@@@@@- -@@@@@@@@@@ %@@@@@@@@@-#@@@@@@@@@+   :%@@@@@@@@@@.   %@@@.   .@@@%   .%@@@@@@@@@@:   #@@@:     -@@@@*          ");
                    System.out.println("\t\t\t\t   :%@@@@@@@@@@- -@@@@@@@@@@ %@@@@@@@@@-#@@@@@@@@@+   :%@@@@@@@@@@.   %@@@.   .@@@%   .%@@@@@@@@@@:   #@@@:     -@@@@*         ");
                    System.out.println("\t\t\t\t   :%@@@@@@@@@@- -@@@@@@@@@@ %@@@@@@@@@-#@@@@@@@@@+   :%@@@@@@@@@@.   %@@@.   .@@@%   .%@@@@@@@@@@:   #@@@:     -@@@@*     ");    
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Selection Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tIt is an in-place comparison sorting algorithm. In this algorithm, the array is ");
                    System.out.println("\t\t\t\t\t\t\tdivided into two parts, first is sorted part, and another one is the unsorted");
                    System.out.println("\t\t\t\t\t\t\tpart. Initially, the sorted part of the array is empty, and unsorted part is");
                    System.out.println("\t\t\t\t\t\t\tthe given array. Sorted part is placed at the left, while the unsorted");
                    System.out.println("\t\t\t\t\t\t\tpart is placed at the right.      \n ");
                    System.out.println("\t\t\t\t\t\t\t==============================================================================");

                    printArray(array);  
                    performSelectionSort(array);
                    break;
                case 11: 
                    clearScreen();
                    System.out.println("\n\n\t\t\t\t           .:=++++-:.       ::::::.          .::::::   ::::::::::::::::::  .::::::             .:::::.             ");
                    System.out.println("\t\t\t\t         .=#%@@@@@@%#+:    -#%%%%%+          *%%%%%#:  #%%%%%%%%%%%%%%%%# .+%%%%%#:           .#%%%%%*.         ");
                    System.out.println("\t\t\t\t        .#@@@@@@@@@@@@@#:  =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@:           :@@@@@@%:       ");
                    System.out.println("\t\t\t\t       .%@@@@@@@@@@@@@@@@: =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@:           :@@@@@@%:  ");    
                    System.out.println("\t\t\t\t      .%@@@@@@@@@@@@@@@@*  =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@:           :@@@@@@%:     ");
                    System.out.println("\t\t\t\t      *@@@@@@@@@@@@@@@@@:  =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@:           :@@@@@@%:          ");
                    System.out.println("\t\t\t\t     :@@@@@@@@%**%@@@@@*   =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@% .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t     +@@@@@@%=:..:-=%@@.   =@@@@@@*          #@@@@@@-  @@@@@@@=---------- .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t     #@@@@@@=       .==    =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:       ");    
                    System.out.println("\t\t\t\t     %@@@@@%:              =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:     ");
                    System.out.println("\t\t\t\t     %@@@@@@-              =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t     *@@@@@@%-.            =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:         ");
                    System.out.println("\t\t\t\t     *@@@@@@%-.            =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t     *@@@@@@%-.            =@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:   ");    
                    System.out.println("\t\t\t\t      :@@@@@@@@@@@#+.      =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:     ");
                    System.out.println("\t\t\t\t       :@@@@@@@@@@@@%=     =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t       :@@@@@@@@@@@@%=     =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:       ");
                    System.out.println("\t\t\t\t         .+%@@@@@@@@@@@%.  =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t           .+#@@@@@@@@@@*  =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:   ");    
                    System.out.println("\t\t\t\t           .+#@@@@@@@@@@*  =@@@@@@@@@@@@@@@@@@@@@@@@-  @@@@@@@@@@@@@@@@@= .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t               .=%@@@@@@@# =@@@@@@*.        .#@@@@@@-  @@@@@@%:           .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t               .=%@@@@@@@# =@@@@@@*.        .#@@@@@@-  @@@@@@%:           .#@@@@@@:           :@@@@@@%:       ");
                    System.out.println("\t\t\t\t                  +@@@@@@%-=@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:        ");
                    System.out.println("\t\t\t\t     +%:          +@@@@@@%:=@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%: ");    
                    System.out.println("\t\t\t\t    :%@@*:       :#@@@@@@%:=@@@@@@*          #@@@@@@-  @@@@@@%.           .#@@@@@@:           :@@@@@@%:         ");
                    System.out.println("\t\t\t\t   .*@@@@%+-:.::-*@@@@@@@# =@@@@@@*          #@@@@@@-  @@@@@@@=---------: .#@@@@@@=---------:.:@@@@@@%=---------:          ");
                    System.out.println("\t\t\t\t   =@@@@@@@@%##%@@@@@@@@@+ =@@@@@@*          #@@@@@@-  @@@@@@@@%%%%%%%%%% .#@@@@@@@%%%%%%%%%#::@@@@@@@@%%%%%%%%%%       ");
                    System.out.println("\t\t\t\t  :#@@@@@@@@@@@@@@@@@@@@%: =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@@@@@@@@@@@%::@@@@@@@@@@@@@@@@@@        ");
                    System.out.println("\t\t\t\t  -@@@@@@@@@@@@@@@@@@@@@=  =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@@@@@@@@@@@%::@@@@@@@@@@@@@@@@@@ ");    
                    System.out.println("\t\t\t\t   -%@@@@@@@@@@@@@@@@@@*   =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@@@@@@@@@@@%::@@@@@@@@@@@@@@@@@@     ");
                    System.out.println("\t\t\t\t    .+%@@@@@@@@@@@@@@%=    =@@@@@@*          #@@@@@@-  @@@@@@@@@@@@@@@@@@ .#@@@@@@@@@@@@@@@@%::@@@@@@@@@@@@@@@@@@          ");
                    System.out.println("\t\t\t\t      .=#%%@@@@@@@%#+.     -#%%%%%+          *%%%%%#:  #%%%%%%%%%%%%%%%%% .*%%%%%%%%%%%%%%%%#:.#%%%%%%%%%%%%%%%%#           ");
                    System.out.println("\t\t\t\t         :-=+++++=:.       .::::::.          .::::::   ::::::::::::::::::  .:::::::::::::::::  ::::::::::::::::::          ");
                    System.out.println("\n\n\t\t\t\t\t\t\t==============================================================================\n");
                    System.out.println("\t\t\t\t\t\t\t\t\t\tWhat is Shell Sorting?\n");
                    System.out.println("\t\t\t\t\t\t\tShell sort is the generalization of insertion sort, which overcomes the");
                    System.out.println("\t\t\t\t\t\t\tdrawbacks of insertion sort by comparing elements separated by a gap of");
                    System.out.println("\t\t\t\t\t\t\tseveral positions,\n");
                    System.out.println("\t\t\t\t\t\t\tIt is a sorting algorithm that is an extended version of insertion sort. Shell");
                    System.out.println("\t\t\t\t\t\t\tsort has improved the average time complexity of insertion sort.\n ");
                    System.out.println("\t\t\t\t\t\t\t=============================================================================="); 

                    printArray(array);
                    performShellSort(array);
                    break;
                case 12:
                    clearScreen();        
                    Menu.main(args);
                    sc.close();     
                    System.exit(0);
                default:
                clearScreen();
                System.out.println("\n\n\t\t\t\t\t\t\t ---------------------------------"); 
                System.out.println("\t\t\t\t\t\t\t|                                |"); 
                System.out.println("\t\t\t\t\t\t\t|        INVALID CHOICE !        |");  
                System.out.println("\t\t\t\t\t\t\t|                                |"); 
                System.out.println("\t\t\t\t\t\t\t ---------------------------------\n");
            }
        }

        System.out.println("\n\n\t\t\t\t\t\t\tThank you for using the Array Sorting Program!");
    }

    public static void printArray(int[] array) {
        System.out.print("\n\t\t\t\t\t\t\tArray Before Sorting: ");
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    public static void performBubbleSort(int[] array) {
        int n = array.length;

        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted Array using Bubble Sort: " + Arrays.toString(array));
    }

    public static void performBucketSort(int[] array) {
        int n = array.length;
        int max = getMax1(array);
        int[] bucket = new int[max + 1];

        for (int i = 0; i <= max; i++) {
            bucket[i] = 0;
        }

        for (int i = 0; i < n; i++) {
            bucket[array[i]]++;
        }

        for (int i = 0, j = 0; i <= max; i++) {
            while (bucket[i] > 0) {
                array[j++] = i;
                bucket[i]--;
            }
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Bucket Sort: " + Arrays.toString(array));
    }

    public static void performCombSort(int[] array) {
        int n = array.length;
        int gap = n;
        int swapped = 1;

        while (gap != 1 || swapped == 1) {
            gap = updatedGap(gap);
            swapped = 0;

            for (int i = 0; i < n - gap; i++) {
                if (array[i] > array[i + gap]) {
                    int temp = array[i];
                    array[i] = array[i + gap];
                    array[i + gap] = temp;
                    swapped = 1;
                }
            }
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Comb Sort: " + Arrays.toString(array));
    }
    
    public static void performCountingSort(int[] array) {
        int n = array.length;
        int max = getMax2(array, n);
        int[] output = new int[n];
        int[] count = new int[max + 1];

        for (int i = 0; i <= max; ++i) {
            count[i] = 0;
        }

        for (int i = 0; i < n; i++) {
            count[array[i]]++;
        }

        for (int i = 1; i <= max; i++) {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--) {
            output[count[array[i]] - 1] = array[i];
            count[array[i]]--;
        }

        for (int i = 0; i < n; i++) {
            array[i] = output[i];
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Counting Sort: " + Arrays.toString(array));
    }


    private static int updatedGap(int gap) {
        gap = (gap * 10) / 13;
        if (gap < 1) {
            return 1;
        }
        return gap;
    }
    
    public static int getMax1(int[] array) {
    int max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}

    private static int getMax2(int[] array, int n) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        return max;
    }

    public static void performHeapSort(int[] array) {
        int n = array.length;

        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(array, n, i);
        }

        for (int i = n - 1; i >= 0; i--) {
            int temp = array[0];
            array[0] = array[i];
            array[i] = temp;
            heapify(array, i, 0);
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Heap Sort: " + Arrays.toString(array));
    }

    private static void heapify(int[] array, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < n && array[left] > array[largest]) {
            largest = left;
        }

        if (right < n && array[right] > array[largest]) {
            largest = right;
        }

        if (largest != i) {
            int temp = array[i];
            array[i] = array[largest];
            array[largest] = temp;
            heapify(array, n, largest);
        }
    }
    
    public static void performInsertionSort(int[] array) {
        int n = array.length;

        for (int i = 1; i < n; i++) {
            int temp = array[i];
            int j = i - 1;
            
            while (j >= 0 && temp <= array[j]) {
                array[j + 1] = array[j];
                j--;
            }
            
            array[j + 1] = temp;
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Insertion Sort: " + Arrays.toString(array));
    }

    public static void performMergeSort(int[] array) {
        int n = array.length;
        mergeSort(array, 0, n - 1);
        System.out.println("\n\t\t\t\t\t\t\tSorted array using Merge Sort: " + Arrays.toString(array));
    }

    public static void merge(int[] a, int beg, int mid, int end) {
        int n1 = mid - beg + 1;
        int n2 = end - mid;
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int i = 0; i < n1; i++)
            leftArray[i] = a[beg + i];
        for (int j = 0; j < n2; j++)
            rightArray[j] = a[mid + 1 + j];

        int i = 0, j = 0, k = beg;

        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                a[k] = leftArray[i];
                i++;
            } else {
                a[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            a[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2) {
            a[k] = rightArray[j];
            j++;
            k++;
        }
    }

    public static void mergeSort(int[] a, int beg, int end) {
        if (beg < end) {
            int mid = (beg + end) / 2;
            mergeSort(a, beg, mid);
            mergeSort(a, mid + 1, end);
            merge(a, beg, mid, end);
        }
    }
    
    public static void performQuickSort(int[] array) {
        int n = array.length;
        quickSort(array, 0, n - 1);
        System.out.println("\n\t\t\t\t\t\t\tSorted array using Quick Sort: " + Arrays.toString(array));
    }

    public static int partition(int[] a, int start, int end) {
        int pivot = a[end];
        int i = (start - 1);

        for (int j = start; j <= end - 1; j++) {
            if (a[j] < pivot) {
                i++;
                int t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }
        int t = a[i + 1];
        a[i + 1] = a[end];
        a[end] = t;
        return (i + 1);
    }

    public static void quickSort(int[] a, int start, int end) {
        if (start < end) {
            int p = partition(a, start, end);
            quickSort(a, start, p - 1);
            quickSort(a, p + 1, end);
        }
    }
    
        public static void performRadixSort(int[] array) {
        int n = array.length;
        radixSort(array, n);
        System.out.println("\n\t\t\t\t\t\t\tSorted array using Radix Sort: " + Arrays.toString(array));
    }

    public static int getMax3(int[] a, int n) {
        int max = a[0];
        for (int i = 1; i < n; i++) {
            if (a[i] > max)
                max = a[i];
        }
        return max;
    }

    public static void countingSort(int[] a, int n, int place) {
        int[] output = new int[n];
        int[] count = new int[10];

        for (int i = 0; i < n; i++)
            count[(a[i] / place) % 10]++;

        for (int i = 1; i < 10; i++)
            count[i] += count[i - 1];

        for (int i = n - 1; i >= 0; i--) {
            output[count[(a[i] / place) % 10] - 1] = a[i];
            count[(a[i] / place) % 10]--;
        }

        for (int i = 0; i < n; i++)
            a[i] = output[i];
    }

    public static void radixSort(int[] a, int n) {
        int max = getMax3(a, n);

        for (int place = 1; max / place > 0; place *= 10)
            countingSort(a, n, place);
    }
    
    public static void performSelectionSort(int[] array) {
        int n = array.length;

        for (int i = 0; i < n - 1; i++) {
            int small = i;

            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[small]) {
                    small = j;
                }
            }

            int temp = array[small];
            array[small] = array[i];
            array[i] = temp;
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Selection Sort: " + Arrays.toString(array));
    }
    
    public static void performShellSort(int[] array) {
        int n = array.length;

        for (int interval = n / 2; interval > 0; interval /= 2) {
            for (int i = interval; i < n; i += 1) {
                int temp = array[i];
                int j;
                for (j = i; j >= interval && array[j - interval] > temp; j -= interval) {
                    array[j] = array[j - interval];
                }

                array[j] = temp;
            }
        }

        System.out.println("\n\t\t\t\t\t\t\tSorted array using Shell Sort: " + Arrays.toString(array));
    }
    public static void clearScreen() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
      }
}

